generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String?
  oauthTokenSecret  String? @map("oauth_token_secret")
  oauthToken        String? @map("oauth_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      Password?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  Fits          Fit[]

  @@map(name: "users")
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @map("user_id")

  @@map(name: "passwords")
}

model Fit {
  id            String  @id @default(cuid())
  name          String
  description   String?
  currentPrice  Int?
  originalPrice Int?
  onSale        Boolean @default(false) @map(name: "on_sale")
  owner         User?   @relation(fields: [ownerId], references: [id])
  ownerId       String? @map(name: "owner_id")

  @@map(name: "fits")
}

model Image {
  id        String          @id @default(cuid())
  name      String
  url       String?
  createdAt DateTime        @default(now()) @map("created_at")
  relations ImageRelation[]

  @@map(name: "images")
}

model ImageRelation {
  id         String @id @default(cuid())
  image      Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId    String
  entityId   String // ID of the related record (Fit, Product, etc)
  entityType String // Discriminator field ("Fit", "Product", etc)
  sortOrder  Int    @default(0) // Optional: for ordering multiple images

  // Add indexes for faster queries
  @@index([entityId, entityType])
  @@index([imageId])
  @@map("image_relations")
}
